n
ls(mtcars)
nn
nn
n
n
n
n
n
n
with(mtcars, tapply(hp, cyl, sum))
install.packages("xlsx")
install.packages("xlsx")
library("datasets")
Iris <- iris
Iris.features = Iris[,c(1,2,3,4)]
View(Iris.features)
Iris.features$class <- NULL
result <- kmeans(Iris, 3)
result <- kmeans(Iris.features, 3)
result
names(result)
result$size
result$centers
result$betweens
result$iter
result$totss
result$cluster
?table
Iris$class
table(Iris$class, result$cluster)
View(Iris)
table(Iris$Species, result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("petal.length", "petal.width")], col=result$cluster)
plot(Iris[c("Petal.Length", "Petal.Width")], col=result$cluster)
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5).
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", df)
h5ls("example.h5")
h5write(df, "example.h5", "df"")
h5ls("example.h5")
h5write(df, "example.h5", "df")
h5ls("example.h5")
created = h5createFile("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
H5close()
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
h5dump("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
library(XML)
html <- htmlTreeParse(url, useInternalNodes=T)
url
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[&id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
xpathSApply(html, "//title", xmlValue)
myL <- xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
myL
names(myL)
library(httr)
html2 <- GET(url)
content2 <- content(html2, as="test")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 <- GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg1
pg2
myapp = oauth_app("twitter",
key=" vsyIpoi2WdGAIVYChhl4km2A5", secret="LmrCUUigwrk2N8VwtU2PDu1HRhgCQKcqYxtGMKtLRoYOiwaGGG")
sig = sign_oauth1.0(myapp, token="2571286993-YwXfyvsEQdVYeJoGDdefKk2SgRRoWhMuG1cTFJ1",
token_secret="KwBfAFtYMgGXMK2OfqaiO4QqVd2xR5QyFksDjjBOfk2Qo")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
names(homeTL)
homeTL$content
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1
homeTL = GET("https://dev.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
sjon1
json1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "436260518ba97c4a02c0", secret="deaba42f9f0a0fef78fc7c05bfb52e0b85749929")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
installed.packages(httpuv)
installed.packages("httpuv")
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
my_content <- content(req)
view(my_content)
names(my_content)
my_content
my_content
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
json1 <- content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(x, "%m/%d/%Y %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
setwd("/home/eugen/Coursera/DataScience/DataScience-ExploratoryDataAnalysis1")
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(x, "%m/%d/%Y %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%m/%d/%Y %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%m/%d/%Y %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
dd$TS
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%m/%d/%Y %H:%M:%S")
dd$TS<-ts
dd$TS
tmp
str(tmp)
str(ts)
tmp
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
ts
tmp<-paste(dd$Date, dd$Time)
#ts<-strptime(tmp, "%m/%d/%Y %H:%M:%S")
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
dd$TS
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
?legend
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', lty=1, col=("gray", "red", "blue") )
legend('topright', lty=1, col=c("gray", "red", "blue") )
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("gray", "red", "blue") )
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue") )
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue") )
# copy into PNG device
dev.copy(png, file="figure/plot3.png", width=480, height=480)
dev.off()
?legend
?text.font
?text
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"), text.width=7 )
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"), text.width=1 )
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"), text.width=1 )
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
# copy into PNG device
dev.copy(png, file="figure/plot3.png", width=480, height=480)
dev.off()
# make a complex plot 2x2
par(mfrow=c(2,2))
plot(dd$TS, dd$Global_active_power, main="", type="l", ylab="Global Active Power",xlab="")
plot(dd$TS, dd$Voltage, main="", type="l", ylab="Global active power (kilowatts)",xlab="")
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(dd$TS, dd$Global_reactive_power, main="", type="l", ylab="Global reactive power",xlab="")
dev.copy(png, file="figure/plot4.png", width=480, height=480)
dev.off()
# open PNG device
png("figure/plot3.png", height = 480, width = 480, bg = "transparent")
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
# copy into PNG device
#dev.copy(png, file="figure/plot3.png", width=480, height=480, bg = "transparent")
dev.off()
## open PNG device
png("figure/plot4.png", height = 480, width = 480, bg = "transparent")
# make a complex plot 2x2
par(mfrow=c(2,2))
plot(dd$TS, dd$Global_active_power, main="", type="l", ylab="Global Active Power",xlab="")
plot(dd$TS, dd$Voltage, main="", type="l", ylab="Global active power (kilowatts)",xlab="")
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(dd$TS, dd$Global_reactive_power, main="", type="l", ylab="Global reactive power",xlab="")
dev.off()
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
?dev
?device
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
## open PNG device
png("figure/plot4.png", height = 480, width = 480, bg = "transparent")
# make a complex plot 2x2
par(mfrow=c(2,2))
plot(dd$TS, dd$Global_active_power, main="", type="l", ylab="Global Active Power",xlab="")
plot(dd$TS, dd$Voltage, main="", type="l", ylab="Global active power (kilowatts)",xlab="")
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(dd$TS, dd$Global_reactive_power, main="", type="l", ylab="Global reactive power",xlab="")
dev.off()
png("figure/plot4.png", height = 480, width = 480)
# make a complex plot 2x2
par(mfrow=c(2,2))
plot(dd$TS, dd$Global_active_power, main="", type="l", ylab="Global Active Power",xlab="")
plot(dd$TS, dd$Voltage, main="", type="l", ylab="Global active power (kilowatts)",xlab="")
# make simple plot
plot(dd$TS, dd$Sub_metering_1, main="Plot 3", type="l", ylab="Global active power (kilowatts)",xlab="")
lines(dd$TS, dd$Sub_metering_2, col="red")
lines(dd$TS, dd$Sub_metering_3, col="blue")
# add legend
legend('topright', legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(dd$TS, dd$Global_reactive_power, main="", type="l", ylab="Global reactive power",xlab="")
dev.off()
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# make simple plot
hist(dd$Global_active_power, col="red", main="Global Active Power", xlab="Global active power (kilowatts)")
dev.copy(png, file="figure/plot1.png", width=480, height=480)
dev.off()
fileName <- "data/household_power_consumption.txt";
# read file into the data frame
df <- read.table(fileName, sep=';', header=TRUE, na.strings='?')
dd <- data.frame()
# select data rows with dates that we need
df$Date <- as.Date(df$Date, format="%d/%m/%Y")
dd <- subset(df, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(df) #we don't need it any more
## Here we have dd dataframe with 2880 rows
# convert strings to Date/Time objects
tmp<-paste(dd$Date, dd$Time)
ts<-strptime(tmp, "%Y-%m-%d %H:%M:%S")
dd$TS<-ts
# make simple plot
plot(dd$TS, dd$Global_active_power, main="Plot 2", type="l", ylab="Global active power (kilowatts)",xlab="")
## copy plot into png file
dev.copy(png, file="figure/plot2.png", width=480, height=480)
dev.off()
